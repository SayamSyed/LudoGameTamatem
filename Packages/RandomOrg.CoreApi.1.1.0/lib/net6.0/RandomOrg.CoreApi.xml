<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RandomOrg.CoreApi</name>
    </assembly>
    <members>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">
            <summary>
            Exception raised by the RandomOrgClient class when the connection doesn't return a HTTP 200 OK response.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">
            <summary>
            Exception raised by the RandomOrgClient class when its API key's request has exceeded its remaining server bits allowance.
            </summary>
            <remarks>
            If the client is currently issuing large requests it may be possible succeed with smaller requests.Use the client's 
            <c>GetBitsLeft()</c> call or access the <c>bits</c> parameter in this class to help determine if an alternative request size is 
            appropriate.
            </remarks>
        </member>
        <member name="F:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException.bits">
            <summary>
            Store for the number of bits remaining.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
            <param name="bits">bits remaining just before error thrown</param>
        </member>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">
            <summary>
            Exception raised by the RandomOrgClient class when its API key's server requests allowance has been exceeded.
            </summary>
            <remarks>
            This indicates that a back-off until midnight UTC is in effect, before which no requests will be sent by the 
            client as no meaningful server responses will be returned.
            </remarks>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">
            <summary>
            Exception raised by the RandomOrgClient class when the server returns a JSON-RPC Error.
            </summary>
            <remarks>
            See https://api.random.org/json-rpc/4/error-codes
            </remarks>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">
            <summary>
            Exception raised by the RandomOrgClient class when its API key has been stopped. Requests will not complete 
            while API key is in the stopped state.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">
            <summary>
            Exception raised by the RandomOrgClient class when the server returns a RANDOM.ORG Error.
            </summary>
            <remarks>
            See https://api.random.org/json-rpc/4/error-codes
            </remarks>
        </member>
        <member name="F:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException.code">
            <summary>
            Store for the RANDOM.ORG Error code.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new exception with the specified detail message and error code.
            </summary>
            <param name="message">the detail message</param>
            <param name="code">the error code, see https://api.random.org/json-rpc/4/error-codes </param>
        </member>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">
            <summary>
            Exception raised by the RandomOrgClient class when its set blocking timeout is exceeded before the 
            request can be sent.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:RandomOrg.CoreApi.Errors.RandomOrgCacheEmptyException">
            <summary>
            Exception raised when data retrievel from an emtpy <c>RandomOrgCache&lt;T&gt;</c> is attempted. 
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.Errors.RandomOrgCacheEmptyException.#ctor(System.String)">
            <summary>
            Constructs a new exception with the specified detail message.
            </summary>
            <param name="message">the detail message</param>
        </member>
        <member name="T:RandomOrg.CoreApi.RequestFunction">
            <summary>
            Delegate for the request function used in a RandomOrgCache.
            </summary>
            <param name="request">JSON to send</param>
            <returns>JObject response from the server</returns>
        </member>
        <member name="T:RandomOrg.CoreApi.ProcessFunction">
            <summary>
            Delegate for extracting data from the JObjected returned by the server.
            </summary>
            <param name="response">JObject response</param>
            <returns>generally, an array (one- or two-dimensional)</returns>
        </member>
        <member name="T:RandomOrg.CoreApi.RandomOrgCache`1">
            <summary>
            Precache class for frequently used requests.
            </summary>
            <remarks>
            *** WARNING **
            Instances of this class should only be obtained using a RandomOrgClient's CreateCache() methods. 
            This class strives to keep a queue of response results populated for instant access via its public 
            <see cref="M:RandomOrg.CoreApi.RandomOrgCache`1.Get"/> method. Work is done by a background Thread, which issues 
            the appropriate request at suitable intervals.
            </remarks>
            <typeparam name="T">return array type, e.g., int[]</typeparam>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.#ctor(RandomOrg.CoreApi.RequestFunction,RandomOrg.CoreApi.ProcessFunction,Newtonsoft.Json.Linq.JObject,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initialize class and start queue population Thread running.
            </summary>
            <remarks>
            ** WARNING** Should only be called by RandomOrgClient's createCache() methods.
            </remarks>
            <param name="requestFunction">function used to send supplied request to server.</param>
            <param name="processFunction">function to process result of requestFunction into expected output.</param>
            <param name="request">request to send to server via requestFunction.</param>
            <param name="cacheSize">number of request responses to try maintain.</param>
            <param name="bulkRequestNumber">if request is set to be issued in bulk, number of result 
            sets in a bulk request, else 0.</param>
            <param name="requestNumber">if request is set to be issued in bulk, number of results 
            in a single request, else 0.</param>
            <param name="singleRequestSize">size of a single request in bits for adjusting bulk requests 
            if bits are in short supply on the server.</param>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.PopulateQueue">
            <summary>
            Function to continue issuing requests until the queue is full.
            </summary>
            <remarks>
            Keep issuing requests to server until queue is full. When queue is full if requests are being issued 
            in bulk, wait until queue has enough space to accommodate all of a bulk request before issuing a new 
            request, otherwise issue a new request every time an item in the queue has been consumed.Note that 
            requests to the server are blocking, i.e., only one request will be issued by the cache at any given time.
            </remarks>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.Stop">
            <summary>
            Cache will no longer continue to populate itself.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.Resume">
            <summary>
            Cache will resume populating itself if stopped.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.IsPaused">
            <summary>
            Check if the cache is currently not re-populating itself.
            </summary>
            <remarks>
            Values currently cached may still be retrieved with <see cref="M:RandomOrg.CoreApi.RandomOrgCache`1.Get"/> but 
            no new values are being fetched from the server.
            <para/>This state can be changed with <see cref="M:RandomOrg.CoreApi.RandomOrgCache`1.Stop"/> and 
            <see cref="M:RandomOrg.CoreApi.RandomOrgCache`1.Resume"/>
            </remarks>
            <returns>true if cache is currently not re-populating itself, false otherwise</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.Get">
            <summary>
            Get next response.
            </summary>
            <returns>next appropriate response for the request this RandomOrgCache represents or, if queue is 
            empty throws a <see cref="T:RandomOrg.CoreApi.Errors.RandomOrgCacheEmptyException"/></returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgCacheEmptyException">Thrown when the queue is empty.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.GetOrWait">
            <summary>
            Get next response or wait until the next value is available.
            </summary>
            <remarks>
            This method will block until a value is available. 
            <para/>Note: if the cache is paused or no more randomness is available from the server this call can 
            result in a dead lock. See <see cref="M:RandomOrg.CoreApi.RandomOrgCache`1.IsPaused"/>.
            </remarks>
            <returns>next appropriate response for the request this RandomOrgCache represents</returns>
            <exception cref="T:System.Threading.ThreadInterruptedException">Thrown if any thread interrupted the current thread before 
            or while the current thread was waiting for a notification. The interrupted status of the current 
            thread is cleared when this exception is thrown.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.GetCachedValues">
            <summary>
            Get number of results of type T remaining in the cache.
            </summary>
            <remarks>
            This essentially returns how often <see cref="M:RandomOrg.CoreApi.RandomOrgCache`1.Get"/> may be called without 
            a cache refill, or <see cref="M:RandomOrg.CoreApi.RandomOrgCache`1.GetOrWait"/> may be called without blocking.
            </remarks>
            <returns>current number of cached results</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.GetUsedBits">
            <summary>
            Get number of bits used by this cache.
            </summary>
            <returns>number of used bits</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgCache`1.GetUsedRequests">
            <summary>
            Get number of requests used by this cache.
            </summary>
            <returns>number of used requests</returns>
        </member>
        <member name="T:RandomOrg.CoreApi.RandomOrgClient">
            <summary>
            RandomOrgClient main class through which API functions are accessed.
            </summary>
            <remarks>
            This class provides either serialized or unserialized (determined on class creation) access to both the 
            signed and unsigned methods of the RANDOM.ORG API. These are threadsafe and implemented as blocking remote 
            procedure calls.
            <para/>If requests are to be issued serially a background Thread will maintain a queue of requests to 
            process in sequence.
            <para/>The class also provides
            access to creation of a convenience class, RandomOrgCache, for precaching API 
            responses when the request is known in advance.
            <para/>This class will only allow the creation of one instance per API key. If an instance of this class 
            already exists for a given key, that instance will be returned instead of a new instance.
            <para/>This class obeys most of the guidelines set forth <a href="https://api.random.org/json-rpc/4">here</a>. 
            All requests respect the server's advisoryDelay returned in any responses, or use 
            <see cref="F:RandomOrg.CoreApi.RandomOrgClient.DefaultDelay"/> if no advisoryDelay is returned. If the supplied API key 
            is paused, i.e., has exceeded its daily bit/request allowance, this implementation will back off until midnight UTC.
            </remarks>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatBase64">
            <summary> Blob format literal (base64).</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatHex">
            <summary> Blob format literal (hex).</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.DefaultReplacement">
            <summary> Default value for the <c>replacement</c> parameter (<c>true</c>).</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.DefaultIntBase">
            <summary> Default value for the <c>integerBase</c> parameter (<c>10</c>).</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.DefaultBlockingTimeout">
            <summary> Default value for <c>blockingTimeout</c> parameter (1 day).</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.DefaultHttpTimeout">
            <summary> Default value for <c>httpTimeout</c> parameter (2 minutes).</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.DefaultCacheSize">
            <summary> Default value for the number of result sets stored in a RandomOrgCache&lt;T&gt; (20)</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.DefaultCacheSizeSmall">
            <summary> Default value for the number of result sets stored in a small RandomOrgCache&lt;T&gt; (10)</summary>
        </member>
        <member name="F:RandomOrg.CoreApi.RandomOrgClient.MaximumLengthUrl">
            <summary> Maximum length for signature verification URL (2,046 characters). </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GetRandomOrgClient(System.String,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Ensure only one instance of RandomOrgClient exists per API key. Create a new instance if the supplied 
            key isn't already known, otherwise return the previously instantiated one.
            </summary>
            <param name="apiKey">
            apiKey of instance to create/find, obtained from RANDOM.ORG, see <a href="https://api.random.org/api-keys">here</a>
            </param>
            <param name="blockingTimeout">
            maximum time in milliseconds to wait before being allowed to send a request. Note this is a hint not a 
            guarantee. The advisory delay from server must always be obeyed. Supply a value of -1 to allow blocking 
            forever (optional; default 24*60*60*1000, i.e., 1 day).
            </param>
            <param name="httpTimeout">
            maximum time in milliseconds to wait for the server response to a request (optional; default 120*1000).
            </param>
            <param name="serialized">
            serialized determines whether or not requests from this instance will be added to a Queue and issued 
            serially or sent when received, obeying any advisory delay (optional; default true).
            </param>
            <returns>new instance if instance doesn't already exist for this key, else existing instance</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.#ctor(System.String,System.Int64,System.Int32,System.Boolean)">
            <summary>
            Constructor. Initialize class and start serialized request sending Thread running if applicable.
            </summary>
            <param name="apiKey">
            apiKey of instance to create/find, obtained from RANDOM.ORG, see <a href="https://api.random.org/api-keys">here</a>.
            </param>
            <param name="blockingTimeout">
            maximum time in milliseconds to wait before being allowed to send a request.Note this is a hint not a 
            guarantee. Be advised advisory delay from server must always be obeyed. Supply a value of -1 to allow 
            blocking forever (default 24*60*60*1000, i.e., 1 day).
            </param>
            <param name="httpTimeout">
            maximum time in milliseconds to wait for the server response to a request (default 120*1000).
            </param>
            <param name="serialized">
            determines whether or not requests from this instance will be added to a Queue and issued serially or sent 
            when received, obeying any advisory delay (default true).
            </param>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateIntegers(System.Int32,System.Int32,System.Int32,System.Boolean,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return an array of true random integers within a user-defined range from the server. 
            See <a href="https://api.random.org/json-rpc/4/basic#generateIntegers">here</a>.
            </summary>
            <param name="n">the number of random integers you need. Must be within the [1,1e4] range.</param>
            <param name="min">
            the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.
            </param>
            <param name="max">
            the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.
            </param>
            <param name="replacement">
            specifies whether the random numbers should be picked with replacement. If true, the resulting numbers may 
            contain duplicate values, otherwise the numbers will all be unique (optional; default true).
            </param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>int[] of true random integers.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateIntegers(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return an array of true random integers within a user-defined range from the server. 
            See <a href="https://api.random.org/json-rpc/4/basic#generateIntegers">here</a>.
            Note: This method returns a <strong>string</strong> array, as it also handles requests for non-decimal integers.
            </summary>
            <param name="n">the number of random integers you need. Must be within the [1,1e4] range.</param>
            <param name="min">
            the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.
            </param>
            <param name="max">
            the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.
            </param>
            <param name="integerBase">
            the base that will be used to display the numbers. Values allowed are 2, 8, 10 and 16 (default 10). 
            </param>
            <param name="replacement">
            specifies whether the random numbers should be picked with replacement. If true, the resulting numbers may 
            contain duplicate values, otherwise the numbers will all be unique (optional; default true).
            </param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>string[] of true random integers.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateIntegerSequences(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return uniform sequences of true random integers within user-defined ranges from the server. See 
            <a href="https://api.random.org/json-rpc/4/basic#generateIntegerSequences">here</a>.
            </summary>
            <param name="n">how many arrays of random integers you need. Must be within the [1,1e3] range.</param>
            <param name="length">the length of each array of random integers requested. Must be within the [1,1e4] range.</param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within 
            the[-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within 
            the[-1e9, 1e9] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the 
            resulting numbers may contain duplicate values, otherwise the numbers will all be unique(optional; default true).</param>
            <returns>int[][] of true random integers.</returns>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>int[][] of true random integers.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateIntegerSequences(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return uniform sequences of true random integers within user-defined ranges from the server. See 
            <a href="https://api.random.org/json-rpc/4/basic#generateIntegerSequences">here</a>. 
            Note: This method returns a <strong>string</strong> array, as it also handles requests for non-decimal integers.
            </summary>
            <param name="n">how many arrays of random integers you need. Must be within the [1,1e3] range.</param>
            <param name="length">the length of each array of random integers requested. Must be within the [1,1e4] range.</param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within 
            the[-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within 
            the[-1e9, 1e9] range.</param>
            <param name="integerBase">the base that will be used to display the numbers. Values allowed are 2, 8, 10 and 16 (default 10).</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the 
            resulting numbers may contain duplicate values, otherwise the numbers will all be unique(optional; default true).</param>
            <returns>string[][] of true random integers.</returns>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>string[][] of true random integers.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateIntegerSequences(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Boolean[],Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return uniform or multiform sequences of true random integers within user-defined ranges from the server. 
            See <a href="https://api.random.org/json-rpc/4/basic#generateIntegerSequences">here</a>.
            </summary>
            <param name="n">how many arrays of random integers you need. Must be within the [1,1e3] range.</param>
            <param name="length">an array with n integers each specifying the length of the sequence identified by its index. 
            Each value in the array must be within the [1,1e4] range.</param>
            <param name="min">an array with n integers, each specifying the lower boundary of the sequence identified by its 
            index. Each value in the array must be within the [-1e9,1e9] range.</param>
            <param name="max">an array with n integers, each specifying the upper boundary of the sequence identified by its 
            index. Each value in the array must be within the [-1e9,1e9] range.</param>
            <param name="replacement">an array with n Boolean values, each specifying whether the sequence identified 
            by its index will be created with or without replacement. If true, the resulting numbers may contain duplicate values, 
            otherwise the numbers will all be unique within each sequence (optional; default null, will be handled as an array of length 
            n containing true).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>int[][] of true random integers.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateIntegerSequences(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Boolean[],Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return uniform or multiform sequences of true random integers within user-defined ranges from the server. 
            See <a href="https://api.random.org/json-rpc/4/basic#generateIntegerSequences">here</a>.
            Note: This method returns a <strong>string</strong> array, as it also handles requests for non-decimal integers.
            </summary>
            <param name="n">how many arrays of random integers you need. Must be within the [1,1e3] range.</param>
            <param name="length">an array with n integers each specifying the length of the sequence identified by its index. 
            Each value in the array must be within the [1,1e4] range.</param>
            <param name="min">an array with n integers, each specifying the lower boundary of the sequence identified by its 
            index. Each value in the array must be within the [-1e9,1e9] range.</param>
            <param name="max">an array with n integers, each specifying the upper boundary of the sequence identified by its 
            index. Each value in the array must be within the [-1e9,1e9] range.</param>
            <param name="integerBase">an array with n integer values, each specifying the base that will be used to display 
            the sequence identified by its index.</param>
            <param name="replacement">replacement an array with n Boolean values, each specifying whether the sequence identified 
            by its index will be created with or without replacement. If true, the resulting numbers may contain duplicate values, 
            otherwise the numbers will all be unique within each sequence (optional; default null, will be handled as an array of length 
            n containing true).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>string[][] of true random integers.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateDecimalFractions(System.Int32,System.Int32,System.Boolean,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return a list (size n) of true random decimal fractions, from a uniform distribution across the [0, 1] 
            interval with a user-defined number of decimal places from the server. See 
            <a href="https://api.random.org/json-rpc/4/basic#generateDecimalFractions">here</a>.
            </summary>
            <param name="n">how many random decimal fractions you need. Must be within the [1,1e4] range.</param>
            <param name="decimalPlaces">the number of decimal places to use. Must be within the [1,20] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, 
            the resulting numbers may contain duplicate values, otherwise the numbers will all be unique(optional; default true).</param>
            <returns>double[] of true random decimal fractions.</returns>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>double[] of true random decimal fractions.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateGaussians(System.Int32,System.Double,System.Double,System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return a list (size n) of true random numbers from a Gaussian distribution (also known as a normal 
            distribution). The form uses a Box-Muller Transform to generate the Gaussian distribution from uniformly 
            distributed numbers. See <a href="https://api.random.org/json-rpc/4/basic#generateGaussians">here</a>.
            </summary>
            <param name="n">how many random numbers you need. Must be within the [1,1e4] range.</param>
            <param name="mean">the distribution's mean. Must be within the [-1e6,1e6] range.</param>
            <param name="standardDeviation">the distribution's standard deviation. Must be within the [-1e6,1e6] range.</param>
            <param name="significantDigits">the number of significant digits to use. Must be within the [2,20] range.</param>
            <returns>double[] of true random doubles from a Gaussian distribution.</returns>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>double[] of true random doubles from a Gaussian distribution.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateStrings(System.Int32,System.Int32,System.String,System.Boolean,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return a list (size n) of true random unicode strings from the server. See 
            <a href="https://api.random.org/json-rpc/4/basic#generateStrings">here</a>.
            </summary>
            <param name="n">how many random strings you need. Must be within the [1,1e4] range.</param>
            <param name="length">the length of each string. Must be within the [1,20] range. All strings will be of 
            the same length.</param>
            <param name="characters">a string that contains the set of characters that are allowed to occur in the 
            random strings. The maximum number of characters is 80.</param>
            <param name="replacement">specifies whether the random strings should be picked with replacement. If true, 
            the resulting list of strings may contain duplicates, otherwise the strings will all be unique (optional; default true).</param>
            <returns>string[] of true random strings.</returns>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>string[] of true random strings.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateUUIDs(System.Int32,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return a list (size n) of version 4 true random Universally Unique IDentifiers (UUIDs) in 
            accordance with section 4.4 of RFC 4122, from the server. See 
            <a href="https://api.random.org/json-rpc/4/basic#generateUUIDs">here</a>.
            </summary>
            <param name="n">how many random UUIDs you need. Must be within the [1,1e3] range.</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>Guid[] of true random UUIDs.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateBlobs(System.Int32,System.Int32,System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Request and return a list (size n) of Binary Large OBjects (BLOBs) as unicode strings containing true random 
            data from the server. See <a href="https://api.random.org/json-rpc/4/basic#generateBlobs">here</a>.
            </summary>
            <param name="n">how many random blobs you need. Must be within the [1,100] range.</param>
            <param name="size">the size of each blob, measured in bits. Must be within the [1,1048576] range and must be 
            divisible by 8.</param>
            <param name="format">specifies the format in which the blobs will be returned. Values allowed are <see cref="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatBase64"/> and 
            <see cref="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatHex"/> (optional; default BlobFormatBase64).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <returns>string[] of true random blobs as strings.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedIntegers(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request a list (size n) of true random integers within a user-defined range from the server. Returns a dictionary 
            object with the parsed integer list mapped to 'data', the original response mapped to 'random', and the response's 
            signature mapped to 'signature'. See <a href="https://api.random.org/json-rpc/4/signed#generateSignedIntegers">here</a>.
            </summary>
            <param name="n">how many random integers you need. Must be within the [1,1e4] range.</param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within 
            the [-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting numbers 
            may contain duplicate values, otherwise the numbers will all be unique (optional; default true).</param>
            <param name="integerBase">the base that will be used to display the numbers. Values allowed are 2, 8, 10 and 16 (optional;default 10).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random int[] if decimal (base 10) or random 
            string[] if non-decimal (any other base value)</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedIntegerSequences(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request and return uniform sequences of true random integers within user-defined ranges from the server. Returns a 
            dictionary object with the parsed 2D integer array mapped to 'data', the original response mapped to 'random', and the 
            response's signature mapped to 'signature'. See <a href="https://api.random.org/json-rpc/4/signed#generateIntegerSequences">here</a>.
            </summary>
            <param name="n">how many arrays of random integers you need. Must be within the [1,1e3] range.</param>
            <param name="length">the length of each array of random integers requested. Must be within the [1,1e4] range.</param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within the 
            [-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within the 
            [-1e9, 1e9] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting 
            numbers may contain duplicate values, otherwise the numbers will all be unique (optional; default true).</param>
            <param name="integerBase">the base that will be used to display the numbers. Values allowed are 2, 8, 10 and 16 (optional; default 10).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random int[][] if decimal (base 10) or random 
            string[][] if non-decimal (any other base value)</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedIntegerSequences(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Boolean[],System.Int32[],Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request and return uniform or multiform sequences of true random integers within user-defined ranges from the server. Returns a 
            dictionary object with the parsed 2D integer array mapped to 'data', the original response mapped to 'random', and the response's 
            signature mapped to 'signature'. See <a href="https://api.random.org/json-rpc/4/signed#generateIntegerSequences">here</a>.
            </summary>
            <param name="n">how many arrays of random integers you need. Must be within the [1,1e3] range.</param>
            <param name="length">an array with n integers each specifying the length of the sequence identified by its index. Each value 
            in the array must be within the[1, 1e4] range. </param>
            <param name="min">an array with n integers, each specifying the lower boundary of the sequence identified by its index. Each 
            value in the array must be within the [-1e9,1e9] range.</param>
            <param name="max">an array with n integers, each specifying the upper boundary of the sequence identified by its index. Each 
            value in the array must be within the [-1e9,1e9] range.</param>
            <param name="replacement">an array with n Boolean values, each specifying whether the sequence identified by its index will be 
            created with or without replacement. If true, the resulting numbers may contain duplicate values, otherwise the numbers will 
            all be unique within each sequence (optional; default null, will be handled as an array of length n containing true).</param>
            <param name="integerBase">an array with n integer values, each specifying the base that will be used to display the sequence 
            identified by its index. Values allowed are 2, 8, 10 and 16 (optional; default null, will be handles as an array of lenght n 
            containg 10s). </param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random int[][] if decimal (all base 
            values are 10) or random string[][] if non-decimal (any other mix of base values)</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedDecimalFractions(System.Int32,System.Int32,System.Boolean,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request a list (size n) of true random decimal fractions, from a uniform distribution across the [0, 1] interval with a user-defined 
            number of decimal places from the server. Returns a dictionary object with the parsed decimal fraction list mapped to 'data', the original 
            response mapped to 'random', and the response's signature mapped to 'signature'. See 
            <a href="https://api.random.org/json-rpc/4/signed#generateSignedDecimalFractions">here</a>.
            </summary>
            <param name="n">how many random decimal fractions you need. Must be within the [1,1e4] range.</param>
            <param name="decimalPlaces">the number of decimal places to use. Must be within the [1,20] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting numbers 
            may contain duplicate values, otherwise the numbers will all be unique (optional; default true).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random double[]</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedGaussians(System.Int32,System.Double,System.Double,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request a list (size n) of true random numbers from a Gaussian distribution (also known as a normal distribution). The form uses 
            a Box-Muller Transform to generate the Gaussian distribution from uniformly distributed numbers. Returns a dictionary object with the 
            parsed random number list mapped to 'data', the original response mapped to 'random', and the response's signature mapped to 'signature'. 
            See <a href="https://api.random.org/json-rpc/4/signed#generateSignedGaussians">here</a>.
            </summary>
            <param name="n">how many random numbers you need. Must be within the [1,1e4] range.</param>
            <param name="mean">the distribution's mean. Must be within the [-1e6,1e6] range.</param>
            <param name="standardDeviation">the distribution's standard deviation. Must be within the [-1e6,1e6] range.</param>
            <param name="significantDigits">the number of significant digits to use. Must be within the [2,20] range.</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random double[]</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedStrings(System.Int32,System.Int32,System.String,System.Boolean,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request a list (size n) of true random strings from the server. Returns a dictionary object with the parsed random string list mapped 
            to 'data', the original response mapped to 'random', and the response's signature mapped to 'signature'. See 
            <a href="https://api.random.org/json-rpc/4/signed#generateSignedStrings">here</a>.
            </summary>
            <param name="n">how many random strings you need. Must be within the [1,1e4] range.</param>
            <param name="length">the length of each string. Must be within the [1,20] range. All strings will be of the same length.</param>
            <param name="characters">a string that contains the set of characters that are allowed to occur in the random strings. The maximum 
            number of characters is 80.</param>
            <param name="replacement">specifies whether the random strings should be picked with replacement. If true, the resulting list of 
            strings may contain duplicates, otherwise the strings will all be unique(optional; default true).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random string[]</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedUUIDs(System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request a list (size n) of version 4 true random Universally Unique IDentifiers (UUIDs) in accordance with section 4.4 of RFC 4122, from 
            the server. Returns a dictionary object with the parsed random UUID list mapped to 'data', the original response mapped to 'random', and 
            the response's signature mapped to 'signature'. See <a href="https://api.random.org/json-rpc/4/signed#generateSignedUUIDs">here</a>.
            </summary>
            <param name="n">how many random UUIDs you need. Must be within the [1,1e3] range.</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random Guid[]</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateSignedBlobs(System.Int32,System.Int32,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Request a list (size n) of Binary Large OBjects (BLOBs) containing true random data from the server. Returns a dictionary object with 
            the parsed random BLOB list mapped to 'data', the original response mapped to 'random', and the response's signature mapped to 'signature'. 
            See <a href="https://api.random.org/json-rpc/4/signed#generateSignedBlobs">here</a>.
            </summary>
            <param name="n">how many random blobs you need. Must be within the [1,100] range.</param>
            <param name="size">the size of each blob, measured in bits. Must be within the [1,1048576] range and must be divisible by 8.</param>
            <param name="format">specifies the format in which the blobs will be returned. Values allowed are <see cref="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatBase64"/> and 
            <see cref="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatHex"/> (optional; default BlobFormatBase64).</param>
            <param name="pregeneratedRandomization"> A JObject which allows the client to specify that the random values should
            be generated from a pregenerated, historical randomization instead of a one-time on-the-fly randomization. There are
            three possible cases:
            <para>- null: The standard way of calling for random values, i.e. true randomness is generated and
            discarded afterwards.</para>
            <para>- date: RANDOM.ORG uses historical true randomness generated on the corresponding date
            (past or present, format: { "date", "YYYY-MM-DD" }).</para>
            <para>- id: RANDOM.ORG uses historical true randomness derived from the corresponding identifier
            in a deterministic manner. Format: { "id", "PERSISTENT-IDENTIFIER" } where "PERSISTENT-IDENTIFIER" is
            a string with length in the [1, 64] range.</para>
            </param>
            <param name="licenseData">A JObject which allows the caller to include data of relevance to the license
            that is associated with the API Key. This is mandatory for API Keys with the license type "Flexible
            Gambling" and follows the format { "maxPayout": { "currency": "XTS", "amount": 0.0 }}. This information
            is used in licensing requested random values and in billing. The currently supported currencies are: "USD",
            "EUR", "GBP", "BTC". The most up-to-date information on the currencies can be found in the
            <a href="https://api.random.org/json-rpc/4/signed">Signed API documentation</a>.</param>
            <param name="userData">JObject that will be included in unmodified form. Its maximum size in encoded (string) form is 1,000 
            characters(optional; default null).</param>
            <param name="ticketId">A string with ticket identifier obtained via the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method. Specifying 
            a value for ticketId will cause RANDOM.ORG to record that the ticket was used to generate the requested random values. Each ticket 
            can only be used once (optional; default null)</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string, "data": random string[]</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GetResult(System.Int32)">
            <summary>
            Retrieve signed random values generated within the last 24h, using a serial number. See 
            <a href="https://api.random.org/json-rpc/4/signed#getResult">here</a>.
            </summary>
            <param name="serialNumber">an integer containing the serial number associated with the response you wish to retrieve.</param>
            <returns>Dictionary with "random": random JObject, "signature": signature string</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)">
            <summary>
            Create n tickets to be used in signed value-generating methods. See <a href="https://api.random.org/json-rpc/4/signed#createTickets">here</a>.
            </summary>
            <param name="n">The number of tickets requested. This must be a number in the [1, 50] range.</param>
            <param name="showResult"> A bool value that determines how much information calls to <see cref="M:RandomOrg.CoreApi.RandomOrgClient.GetTicket(System.String)"/> will return. If showResult 
            is false, GetTicket() will return only the basic ticket information. If showResult is true, the full random and signature objects from the 
            response that was used to satisfy the ticket is returned.</param>
            <returns>JObject[] of ticket objects</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.RevealTickets(System.String)">
            <summary>
            Marks a specific ticket and all its predecessors in its chain as being revealed, meaning that
            subsequent calls to <see cref="M:RandomOrg.CoreApi.RandomOrgClient.GetTicket(System.String)"/> will return the full details of the tickets,
            including the random values produced when the tickets were used. Using this method effectively
            changes the value of <b>showResult</b> (which was specified when the first ticket in the chain
            was created) from <i>false</i> to true. The reason that not only the ticket specified (but also
            its predecessors in its chain) are revealed is to ensure maximum transparency. This method does
            not affect any successors to the ticket in the chain.
            <para/>
            Click <a href="https://api.random.org/json-rpc/4/signed#revealTickets">here</a> for more information.
            </summary>
            <param name="ticketId">A string value that uniquely identifies the ticket.</param>
            <returns>A number value that specifies how many tickets were revealed. This will
            include the ticket specified as well as all its predecessors. If this method is invoked
            on a ticket that is already revealed (or which was created with <b>showResult</b> set to
            <i>true</i>), then the value returned will be zero.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ListTickets(System.String)">
            <summary>
            Obtain information about tickets linked with your API key. The maximum number of tickets that can be returned by this method is 2000. 
            See <a href="https://api.random.org/json-rpc/4/signed#listTickets">here</a>.
            </summary>
            <param name="ticketType">A string describing the type of tickets you want to obtain information about. Possible values are <c>singleton, head</c>
            and <c>tail</c>.
            <list type="bullet">
            <item>
            <term>singleton</term>
            <description>returns tickets that have no previous or next tickets.</description>
            </item>
            <item>
            <term>head</term>
            <description>returns tickets hat do not have a previous ticket but that do have a next ticket.</description>
            </item>
            <item>
            <term>tail</term>
            <description>returns tickets that have a previous ticket but do not have a next ticket. </description>
            </item>
            </list></param>
            <returns>JObject[] of tickets of the type requested</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GetTicket(System.String)">
            <summary>
            Obtain information about a single ticket using the {@code ticketId} associated with it. If the ticket has <c>showResult</c> set to true 
            and has been used, this method will return the values generated. See <a href="https://api.random.org/json-rpc/4/signed#getTicket">here</a>.
            </summary>
            <param name="ticketId">A string containing a ticket identifier returned by a prior call to the <see cref="M:RandomOrg.CoreApi.RandomOrgClient.CreateTickets(System.Int32,System.Boolean)"/> method.</param>
            <returns>Dictionary with the following data: 
            <para/> If the ticket was created with <c>showResult true</c> and has been used in a signed value-generating method:
            <list type="bullet">
            <item>
            <term>"random"</term>
            <description>random JObject as returned from the server</description>
            </item>
            <item>
            <term>"signature"</term>
            <description>signature string</description>
            </item>
            <item>
            <term>"data"</term>
            <description>an array of random values of the type corresponding to the method that the ticket was used on</description>
            </item>
            </list>
            <para/> If the ticket was created with <c>showResult false</c> or has not yet been used:
            <list type="bullet">
            <item>
            <term>"result"</term>
            <description>JObject returned from the server</description>
            </item>
            </list>
            </returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.VerifySignature(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            *Simplified Version* Verify the signature of a response previously received from one of the methods in he Signed API with the server. 
            This is used to examine the authenticity of numbers. Returns true on verification success. See 
            <a href="https://api.random.org/json-rpc/4/signed#verifySignature">here</a>.
            </summary>
            <param name="random">Dictionary object as it is returned by RANDOM.ORG through one of the Signed API methods. </param>
            <returns>verification success.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.VerifySignature(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Verify the signature of a response previously received from one of the methods in he Signed API with the server. 
            This is used to examine the authenticity of numbers. Returns true on verification success. See 
            <a href="https://api.random.org/json-rpc/4/signed#verifySignature">here</a>.
            </summary>
            <param name="random">the random field from a response returned by RANDOM.ORG through one of the Signed API methods.</param>
            <param name="signature">the signature field from the same response that the random field originates from.</param>
            <returns>verification success.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateUrl(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Create the URL for the signature verification page of a signed response.
            </summary>
            <remarks>The web-page accessible from this URL will contain the details of the response used in this method,
            provided that the signature can be verified. This URL is also shown under "Show Technical Details" when the
            online <a href="https://api.random.org/signatures/form">Signature Verification Form</a> is used to validate
            a signature.
            <para>Note: this method throws a RandomOrgRANDOMORGException if the length of the URL created
            exceeds the maximum length permitted (2,046 characters).</para></remarks>
            <param name="random">the random field from a response returned by RANDOM.ORG through one of the Signed API methods.</param>
            <param name="signature">the signature field from the same response that the random field originates from.</param>
            <returns>string containing the signature verification URL</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the URL is too long (max. 2,046 characters)</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateHtml(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Create the HTML form for the signature verification page of a signed response.
            </summary>
            <remarks>
            The web-page accessible from the "Validate" button created will contain the details of the
            response used in this method, provided that the signature can be verified. The same HTML form
            is also shown under "Show Technical Details" when the online
            <a href="https://api.random.org/signatures/form">Signature Verification Form</a> is used to
            validate a signature.
            </remarks>
            <param name="random">the random field from a response returned by RANDOM.ORG through one of the Signed API methods.</param>
            <param name="signature">the signature field from the same response that the random field originates from.</param>
            <returns>string containing the code for the HTML form</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateIntegerCache(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random integers. The RandomOrgCache can be polled for new results conforming to the output format of the input 
            request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random integers you need. Must be within the [1,1e4] range.</param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting numbers may contain 
            duplicate values, otherwise the numbers will all be unique(optional; default true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 20, minimum 2).</param>
            <returns>RandomOrgCache&lt;int[]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateIntegerCache(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random integers. The RandomOrgCache can be polled for new results conforming to the output format of the input 
            request. RandomOrgCache type is same as expected return value. Note: This method creates a RandomOrgCache with <strong>string</strong> arrays, 
            as it also handles requests for non-decimal integers.
            </summary>
            <param name="n">how many random integers you need. Must be within the [1,1e4] range.</param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="integerBase">the base that will be used to display the numbers. Values allowed are 2, 8, 10 and 16. </param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting numbers may contain 
            duplicate values, otherwise the numbers will all be unique(optional; default true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 20, minimum 2).</param>
            <returns>RandomOrgCache&lt;string[]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateIntegerSequenceCache(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random integer sequences. The RandomOrgCache can be polled for new results conforming to the output 
            format of the input request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random integers you need. Must be within the [1,1e4] range.</param>
            <param name="length">the length of each array of random integers requested. Must be within the[1, 1e4] range. </param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting numbers may contain 
            duplicate values, otherwise the numbers will all be unique (optional; default true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time(default 10, minimum 2).</param>
            <returns>RandomOrgCache&lt;int[][]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateIntegerSequenceCache(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random integer sequences. The RandomOrgCache can be polled for new results conforming to the output 
            format of the input request. RandomOrgCache type is same as expected return value. Note: This method creates a RandomOrgCache with 
            <strong>string</strong> arrays, as it also handles requests for non-decimal integers.
            </summary>
            <param name="n">how many random integers you need. Must be within the [1,1e4] range.</param>
            <param name="length">the length of each array of random integers requested. Must be within the[1, 1e4] range. </param>
            <param name="min">the lower boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="max">the upper boundary for the range from which the random numbers will be picked. Must be within the[-1e9, 1e9] range.</param>
            <param name="integerBase">the base that will be used to display the numbers. Values allowed are 2, 8, 10 and 16 (default 10).</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting numbers may contain 
            duplicate values, otherwise the numbers will all be unique (optional; default true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time(default 10, minimum 2).</param>
            <returns>RandomOrgCache&lt;string[][]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateIntegerSequenceCache(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Boolean[],System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random integer sequences. The RandomOrgCache can be polled for new results conforming to the output 
            format of the input request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random integers you need. Must be within the [1,1e4] range.</param>
            <param name="length">an array with n integers each specifying the length of the sequence identified by its index.Each value in the 
            array must be within the [1,1e4] range.</param>
            <param name="min">an array with n integers, each specifying the lower boundary of the sequence identified by its index. Each value 
            in the array must be within the [-1e9,1e9] range.</param>
            <param name="max">an array with n integers, each specifying the upper boundary of the sequence identified by its index. Each value 
            in the array must be within the [-1e9,1e9] range.</param>
            <param name="replacement">an array with n Boolean values, each specifying whether the sequence identified 
            by its index will be created with or without replacement. If true, the resulting numbers may contain duplicate values, 
            otherwise the numbers will all be unique within each sequence (optional; default null, will be handled as an array of length 
            n containing true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 10, minimum 2).</param>
            <returns>RandomOrgCache&lt;int[][]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateIntegerSequenceCache(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Boolean[],System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random integer sequences. The RandomOrgCache can be polled for new results conforming to the output 
            format of the input request. RandomOrgCache type is same as expected return value. Note: This method creates a RandomOrgCache with 
            <strong>string</strong> arrays, as it also handles requests for non-decimal integers.
            </summary>
            <param name="n">how many random integers you need. Must be within the [1,1e4] range.</param>
            <param name="length">an array with n integers each specifying the length of the sequence identified by its index. Each value in the 
            array must be within the [1,1e4] range.</param>
            <param name="min">an array with n integers, each specifying the lower boundary of the sequence identified by its index. Each value 
            in the array must be within the [-1e9,1e9] range.</param>
            <param name="max">an array with n integers, each specifying the upper boundary of the sequence identified by its index. Each value 
            in the array must be within the [-1e9,1e9] range.</param>
            <param name="integerBase">an array with n integer values, each specifying the base that will be used to display the sequence identified 
            by its index. Values allowed are 2, 8, 10 and 16 (default 10).</param>
            <param name="replacement">an array with n Boolean values, each specifying whether the sequence identified 
            by its index will be created with or without replacement. If true, the resulting numbers may contain duplicate values, 
            otherwise the numbers will all be unique within each sequence (optional; default null, will be handled as an array of length 
            n containing true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 10, minimum 2).</param>
            <returns>RandomOrgCache&lt;string[][]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateDecimalFractionCache(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random decimal fractions. The RandomOrgCache can be polled for new results conforming to the output format 
            of the input request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random decimal fractions you need. Must be within the [1,1e4] range.</param>
            <param name="decimalPlaces">the number of decimal places to use. Must be within the [1,20] range.</param>
            <param name="replacement">specifies whether the random numbers should be picked with replacement. If true, the resulting numbers may 
            contain duplicate values, otherwise the numbers will all be unique (optional; default true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 20, minimum 2).</param>
            <returns>RandomOrgCache&lt;double[]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateGaussianCache(System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random numbers from a Gaussian distribution. The RandomOrgCache can be polled for new results conforming 
            to the output format of the input request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random numbers you need. Must be within the [1,1e4] range.</param>
            <param name="mean">the distribution's mean. Must be within the [-1e6,1e6] range.</param>
            <param name="standardDeviation">the distribution's standard deviation. Must be within the [-1e6,1e6] range.</param>
            <param name="significantDigits">the number of significant digits to use. Must be within the [2,20] range.</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 20, minimum 2).</param>
            <returns>RandomOrgCache&lt;double[]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateStringCache(System.Int32,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random strings. The RandomOrgCache can be polled for new results conforming to the output 
            format of the input request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random strings you need. Must be within the [1,1e4] range.</param>
            <param name="length">the length of each string. Must be within the [1,20] range. All strings will be of the same length.</param>
            <param name="characters">a string that contains the set of characters that are allowed to occur in the random strings. 
            The maximum number of characters is 80.</param>
            <param name="replacement">specifies whether the random strings should be picked with replacement. If true, the resulting 
            list of strings may contain duplicates, otherwise the strings will all be unique(optional; default true).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 20, minimum 2).</param>
            <returns>RandomOrgCache&lt;string[]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateUUIDCache(System.Int32,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain UUIDs. The RandomOrgCache can be polled for new results conforming to the output 
            format of the input request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random UUIDs you need. Must be within the [1,1e3] range.</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 10, minimum 2).</param>
            <returns>RandomOrgCache&lt;Guid[]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CreateBlobCache(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Get a RandomOrgCache to obtain random blobs. The RandomOrgCache can be polled for new results conforming to the output 
            format of the input request. RandomOrgCache type is same as expected return value.
            </summary>
            <param name="n">how many random blobs you need. {@code n*(cacheSize/2)} must be within the [1,100] range.</param>
            <param name="size">the size of each blob, measured in bits. Must be within the [1,1048576] range and must be divisible by 8.</param>
            <param name="format">specifies the format in which the blobs will be returned. Values allowed are <see cref="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatBase64"/> and 
            <see cref="F:RandomOrg.CoreApi.RandomOrgClient.BlobFormatHex"/> (optional; default BlobFormatBase64).</param>
            <param name="cacheSize">number of result-sets for the cache to try to maintain at any given time (optional; default 10, minimum 2).</param>
            <returns>RandomOrgCache&lt;string[]&gt;</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GetRequestsLeft">
            <summary>
            Return the (estimated) number of remaining API requests available to the client. If cached usage info is older than 
            <see cref="F:RandomOrg.CoreApi.RandomOrgClient.AllowanceStateRefreshSeconds"/> fresh info is obtained from the server. If fresh info has to be obtained the following 
            exceptions can be raised.
            </summary>
            <returns>number of requests remaining.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GetBitsLeft">
            <summary>
            Return the (estimated) number of remaining true random bits available to the client. If cached usage info is older than 
            <see cref="F:RandomOrg.CoreApi.RandomOrgClient.AllowanceStateRefreshSeconds"/> fresh info is obtained from the server. If fresh info has to be obtained the following 
            exceptions can be raised.
            </summary>
            <returns>number of bits remaining.</returns>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgSendTimeoutException">Thrown when blocking timeout is exceeded before the request can be sent. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgKeyNotRunningException">Thrown when the API key has been stopped. </exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientRequestsException">Thrown when the API key's server requests allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgInsufficientBitsException">Thrown when the API key's server bits allowance has been exceeded.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgBadHTTPResponseException">Thrown when a HTTP 200 OK response is not received.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgRANDOMORGException">Thrown when the server returns a RANDOM.ORG Error.</exception>
            <exception cref="T:RandomOrg.CoreApi.Errors.RandomOrgJSONRPCException">Thrown when the server returns a JSON-RPC Error.</exception>
            <exception cref="T:System.IO.IOException">Thrown when an I/O error occurs.</exception>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GetUsage">
            <summary>
            Issue a getUsage request to update bits and requests left.
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateKeyedRequest(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add generic request parameters and API key to custom request.
            </summary>
            <param name="parameters">custom parameters to generate request around.</param>
            <param name="method">method to send request to.</param>
            <returns>fleshed out JSON request</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GenerateRequest(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add generic request parameters to custom request.
            </summary>
            <param name="parameters">custom parameters to generate request around.</param>
            <param name="method">method to send request to.</param>
            <returns>fleshed out JSON request</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractInts(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts int[] from JSON response.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>extracted int[]</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractIntSequences(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts int[][] from JSON response.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>extracted int[][]</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractIntSequencesString(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts String[][] from JSON response.
            </summary>
            <param name="response">response JSON from which to extract data.</param>
            <returns>extracted String[][]</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractDoubles(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts double[] from JSON response.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>extracted double[]</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractStrings(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts string[] from JSON response.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>extracted string[]</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractUUIDs(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts Guid[] from JSON response.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>extracted Guid[]</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractTickets(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts JObject[] of tickets from JSON response.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>extracted JObject[]</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractTicketCount(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Extracts the "ticketCount" property from a JSON response returned
            from a call to the "revealTickets" method.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>extracted number value that specifies how many tickets were revealed.</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractResponse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Gets random data as separate from response JSON.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <returns>JArray of random data</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractSignedResponse(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Gets signing data from response JSON and add to result Dictionary.
            </summary>
            <param name="response">JSON from which to extract data.</param>
            <param name="result">result to add signing data to.</param>
            <returns>the passed in result Dictionary</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ExtractVerificationResponse(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Gets verification response as separate from response JSON.
            </summary>
            <param name="response">JSON from which to extract verification response.</param>
            <returns>verification success</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.SendRequest(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Send request as determined by serialized boolean.
            </summary>
            <param name="request">JSON to send.</param>
            <returns>JObject response</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.SendUnserializedRequest(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Immediate call to server.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:RandomOrg.CoreApi.RandomOrgClient.UnserializedRunnable">
            <summary>
            Runnable for unserialized network calls. 
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.UnserializedRunnable.GetData">
            <returns>data returned by network request - or null if not yet arrived.</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.SendSerializedRequest(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Add request to queue to be executed by networking thread one-by-one. Method blocks until this request receives a response or times out.
            </summary>
            <param name="request">JSON to send.</param>
            <returns>JObject response</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ThreadedRequestSending">
            <summary>
            Thread to synchronously send requests in queue. 
            </summary>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.ThrowException(System.Exception)">
            <summary>
            Throw specific Exception types.
            </summary>
            <param name="e">exception to throw.</param>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.SendRequestCore(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Core send request function.
            </summary>
            <param name="request">JSON to send.</param>
            <returns>info on request success/response in a HashMap with one or other of the following entries: "exception" - 
            an exception which may be one of those found in <see cref="N:RandomOrg.CoreApi.Errors"/>; "response" - JObject response</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.Post(Newtonsoft.Json.Linq.JObject)">
            <summary>
            POST JSON to server and return JSON response.
            </summary>
            <param name="json">request to post. </param>
            <returns>JSON response.</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.IntegerHelper(System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for integer methods.
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.IntegerSequenceHelper(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for uniform integer sequence methods. 
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.IntegerSequenceHelper(System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Boolean[],System.Int32[],Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for (optionally) multiform integer sequence methods. 
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.DecimalFractionHelper(System.Int32,System.Int32,System.Boolean,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for decimal fraction methods. 
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.GaussianHelper(System.Int32,System.Double,System.Double,System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for Gaussian methods. 
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.StringHelper(System.Int32,System.Int32,System.String,System.Boolean,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for string methods. 
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.UUIDHelper(System.Int32,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for UUID methods. 
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.BlobHelper(System.Int32,System.Int32,System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String,System.Boolean)">
            <summary>
            Helper function to generate and send requests for BLOB methods. 
            </summary>
            <returns>JObject returned from the server</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.CurrentTimeMillis">
            <summary>
            Helper function to get the current time (UTC) in milliseconds
            </summary>
            <returns>Time between Jan. 1, 1970 and now (UTC) </returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.UtcMidnightMillis">
            <summary>
            Helper function to get midnight (UTC) in milliseconds
            </summary>
            <returns>Time between Jan. 1, 1970 and now (UTC) </returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.Adjust(System.Int32[],System.Int32)">
            <summary>
            Helper function for createIntegerSequenceCache with array ([]) parameters
            </summary>
            <returns>an array which contains the contents of a repeated n times</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.Adjust(System.Boolean[],System.Int32)">
            <summary>
            Helper function for createIntegerSequenceCache with array ([]) parameters
            </summary>
            <returns>an array which contains the contents of a repeated n times</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.UrlFormatting(System.String)">
            <summary>
            Helper function to make a string URL-safe (Percent-Encoding as described in RFC 3986 for PHP) and to,
            optionally, base64-encode the string.
            </summary>
            <returns>URL-safe (optionally encoded) version of the initial string s</returns>
        </member>
        <member name="M:RandomOrg.CoreApi.RandomOrgClient.HtmlInput(System.String,System.String,System.String)">
            <summary>
            Helper function to create HTML code with input tag.
            </summary>
            <returns>string with input tag and the parameters passed</returns>
        </member>
    </members>
</doc>
